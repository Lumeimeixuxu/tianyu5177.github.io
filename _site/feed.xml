<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tianyu</title>
    <description>欢迎来到我的一亩三分地。</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 10 May 2018 20:32:50 +0800</pubDate>
    <lastBuildDate>Thu, 10 May 2018 20:32:50 +0800</lastBuildDate>
    <generator>Jekyll v3.1.1</generator>
    
      <item>
        <title>demo</title>
        <description>
</description>
        <pubDate>Thu, 10 May 2018 00:00:00 +0800</pubDate>
        <link>/2018/05/demo/</link>
        <guid isPermaLink="true">/2018/05/demo/</guid>
        
        <category>JS技术</category>
        
        
      </item>
    
      <item>
        <title>JS中addEventListener的事件捕获、事件冒泡</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;概要：&lt;/h2&gt;
&lt;p&gt;  addEventListener()函数是最常用的用来为指定的dom元素动态绑定事件,在最近在addEventListener这个方法上踩了一个小坑，所以在这里仔细的总结一下这个方法，希望对各位小伙伴有帮助。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;&lt;strong&gt;一、基本形式及参数：&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;  addEventListener()有三个参数，具体如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;addEventListener(type,listener,useCapture);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;参数说明：&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;type：&lt;/strong&gt;监听事件的类型，如：click、load… 等等。&lt;br /&gt;
&lt;strong&gt;listener：&lt;/strong&gt;执行监听事件的函数名称。&lt;br /&gt;
&lt;strong&gt;useCapture：&lt;/strong&gt; 是否采用捕获模式,&lt;strong&gt;fasle&lt;/strong&gt;:冒泡模式；&lt;strong&gt;true&lt;/strong&gt;:捕获模式。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;&lt;strong&gt;二、比较常用的方式：&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;  例如给一个按钮增加监听方法，这样我们点击id为button0的元素时，控制台就会输出“hello”。	&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;button id=&quot;button0&quot;&amp;gt;按钮0&amp;lt;/button&amp;gt;

var btn = document.getElementById(&quot;button0&quot;);

btn.addEventListener(&quot;click&quot;,btnHandler);

function btnHandler(){
    console.log(&quot;hello&quot;)// 处理逻辑
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-3&quot;&gt;&lt;strong&gt;三、冒泡模式&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;  接下来我们就围绕第三个参数来探讨问题，为了更清晰的解释问题，我们先写一个嵌套的四个div，HTML和CSS如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;lt;style&amp;gt;
    #div0{
        width: 200px;
        height: 200px;
        background-color: gray;
    }
    #div1{
        width: 160px;
        height: 160px;
        background-color: orange;
    }
    #div2{
        width: 100px;
        height: 100px;
        background-color: skyblue;
    }
    #div3{
        width: 60px;
        height: 60px;
        background-color: pink;
    }
&amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  
&amp;lt;div id=&quot;div0&quot;&amp;gt;
  &amp;lt;div id=&quot;div1&quot;&amp;gt;
    &amp;lt;div id=&quot;div2&quot;&amp;gt;
        &amp;lt;div id=&quot;div3&quot;&amp;gt;
            
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;  浏览器展示效果如下图（为方便观察，我在每个div上加了文字说明）：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oi5hiw2r7.bkt.clouddn.com/div.png?imageMogr2/thumbnail/300x400&amp;gt;/blur/1x0/quality/100&quot; alt=&quot;网页展示&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  当前结构的3D侧视图如下：(由内到外分别为：div0、div1、div2、div3)div0是根div元素。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oi5hiw2r7.bkt.clouddn.com/div3D.png?imageMogr2/thumbnail/300x400&amp;gt;/blur/1x0/quality/100&quot; alt=&quot;3D展示&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  接下来我们给每一个div都绑定监听方法，让点击当前div时，控制台输出当前div名称，所有的useCapture都设置为fasle，使用冒泡模式，JS代码如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; // 获取每个div的DOM对象。
 var div0 = document.getElementById(&quot;div0&quot;)
var div1 = document.getElementById(&quot;div1&quot;)
var div2 = document.getElementById(&quot;div2&quot;)
var div3 = document.getElementById(&quot;div3&quot;)
 // 给每个div增加监听事件。
div0.addEventListener(&quot;click&quot;,div0Handler,false);
div1.addEventListener(&quot;click&quot;,div1Handler,false);
div2.addEventListener(&quot;click&quot;,div2Handler,false);
div3.addEventListener(&quot;click&quot;,div3Handler,false);
 // div0的回调函数
function div0Handler(e){
    e=e || window.event;
    console.log(&quot;div0&quot;)
}
// div1的回调函数
function div1Handler(e){
    e=e || window.event;
    console.log(&quot;div1&quot;)
}
// div2的回调函数
function div2Handler(e){
    e=e || window.event;
    console.log(&quot;div2&quot;)
}
// div3的回调函数
function div3Handler(e){
    e=e || window.event;
    console.log(&quot;div3&quot;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;  下面我们开始观察结果：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;输出1：&lt;/strong&gt;点击div0（灰色的），控制台先后输出为：&lt;code class=&quot;highlighter-rouge&quot;&gt;div0&lt;/code&gt;。 &lt;br /&gt;
&lt;strong&gt;输出2：&lt;/strong&gt;点击div1（橙色的），控制台先后输出为：&lt;code class=&quot;highlighter-rouge&quot;&gt;div1&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;div0&lt;/code&gt;。 &lt;br /&gt;
&lt;strong&gt;输出3：&lt;/strong&gt;点击div2（蓝色的），控制台先后输出为：&lt;code class=&quot;highlighter-rouge&quot;&gt;div2&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;div1&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;div0&lt;/code&gt;。 &lt;br /&gt;
&lt;strong&gt;输出4：&lt;/strong&gt;点击div3（粉色的），控制台先后输出为：&lt;code class=&quot;highlighter-rouge&quot;&gt;div3&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;div2&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;div1&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;div0&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;  &lt;strong&gt;解读上述输出结果：&lt;/strong&gt;&lt;br /&gt;
  
输出1不难理解，点击div0即输出当前的“div0”，那么输出2怎么解释呢？&lt;br /&gt;我们可以这样去理解输出2：
当点击div0时，div0的监听的回调函数会正常输出“div0”，但是输出之后事情并没有结束，&lt;strong&gt;因为此时方法的useCapture为fale，即当前为冒泡模式，所以点击div1之后，事件会向它的祖先元素(div1)扩散，由于祖先元素也绑定了监听事件，所以祖先素对应的监听函数也执行了&lt;/strong&gt;，所以输出了“div1”，这就是&lt;strong&gt;冒泡模式&lt;/strong&gt;，理解了输出2，所以也就不难理解输出3、输出4了。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;冒泡模式总结：&lt;/strong&gt;&lt;br /&gt;
  冒泡模式的“冒泡”，可以理解为：从当前元素触发监听事件后，向自己的祖先元素一层一层扩散（冒泡），一层一层的祖先素都会响应自己的监听函数,直到DOM的根元素，即冒泡模式的方向是：从自己到祖先元素。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;&lt;strong&gt;四、捕获模式&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;还是刚才的代码，我们开启你捕获模式，把事件监听部分代码改为如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 给每个div增加监听事件，这次为捕获模式，全部为true。
div0.addEventListener(&quot;click&quot;,div0Handler,true);
div1.addEventListener(&quot;click&quot;,div1Handler,true);
div2.addEventListener(&quot;click&quot;,div2Handler,true);
div3.addEventListener(&quot;click&quot;,div3Handler,true);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;  接下来观察输出结果：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;输出1：&lt;/strong&gt;点击div0（灰色的），控制台先后输出为：&lt;code class=&quot;highlighter-rouge&quot;&gt;div0&lt;/code&gt;。 &lt;br /&gt;
&lt;strong&gt;输出2：&lt;/strong&gt;点击div1（橙色的），控制台先后输出为：&lt;code class=&quot;highlighter-rouge&quot;&gt;div0&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;div1&lt;/code&gt;。 &lt;br /&gt;
&lt;strong&gt;输出3：&lt;/strong&gt;点击div2（蓝色的），控制台先后输出为：&lt;code class=&quot;highlighter-rouge&quot;&gt;div0&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;div1&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;div2&lt;/code&gt;。 &lt;br /&gt;
&lt;strong&gt;输出4：&lt;/strong&gt;点击div3（粉色的），控制台先后输出为：&lt;code class=&quot;highlighter-rouge&quot;&gt;div0&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;div1&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;div2&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;div3&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;  &lt;strong&gt;解读上述输出结果：&lt;/strong&gt;&lt;br /&gt;
  是的，正如你所见，事件捕获与事件冒泡完全相反，在捕获模式中，出发一个元素监听时，先找到这个元素的根祖先元素，触发这个祖先元素的事件，然后再逐级触发子元素的事件，直到当前元素为止，即捕获模式的方向是：&lt;strong&gt;从祖先元素到自己&lt;/strong&gt;。&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;&lt;strong&gt;五、冒泡与捕获同时存在，执行顺序是怎样的？&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;  首先我们明确一点就是：&lt;strong&gt;浏览器优先处理捕获事件&lt;/strong&gt;，当冒泡与捕获同时存在的时候，浏览器先把当前元素层级中的捕获事件拿出来，按照捕获的顺序进行响应，随后再按照冒泡的顺序进行冒泡事件响应，我们把刚才的事件绑定改为如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;div0.addEventListener(&quot;click&quot;,div0Handler,true);// div0为捕获模式
div1.addEventListener(&quot;click&quot;,div1Handler,false);// div1为冒泡模式
div2.addEventListener(&quot;click&quot;,div2Handler,true);// div2为捕获模式
div3.addEventListener(&quot;click&quot;,div3Handler,false);// div3为冒泡模式
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;输出结果如下：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;输出1：&lt;/strong&gt;点击div0（灰色的），控制台先后输出为：&lt;code class=&quot;highlighter-rouge&quot;&gt;div0&lt;/code&gt;。 &lt;br /&gt;
&lt;strong&gt;输出2：&lt;/strong&gt;点击div1（橙色的），控制台先后输出为：&lt;code class=&quot;highlighter-rouge&quot;&gt;div0&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;div1&lt;/code&gt;。 &lt;br /&gt;
&lt;strong&gt;输出3：&lt;/strong&gt;点击div2（蓝色的），控制台先后输出为：&lt;code class=&quot;highlighter-rouge&quot;&gt;div0&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;div2&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;div1&lt;/code&gt;。 &lt;br /&gt;
&lt;strong&gt;输出4：&lt;/strong&gt;点击div3（粉色的），控制台先后输出为：&lt;code class=&quot;highlighter-rouge&quot;&gt;div0&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;div2&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;div3&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;div1&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;  &lt;strong&gt;解读上述输出结果：&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;输出1：&lt;/strong&gt;div0为捕获，祖先元素无监听事件，只输出div0。 &lt;br /&gt;
&lt;strong&gt;输出2：&lt;/strong&gt;div1是冒泡模式，它的祖先元素div0是捕获模式，优先处理捕获，输出div0，然后输出div1。 &lt;br /&gt;
&lt;strong&gt;输出3：&lt;/strong&gt;读取当前层级：div2是捕获，祖先div1是冒泡，祖先div0是捕获，优先处理捕获，捕获的方向是：胸祖先到自己，所以输出：div0、div2，最后处理冒泡，输出div1。&lt;br /&gt;
&lt;strong&gt;输出4：&lt;/strong&gt;读取当前层级：div3是冒泡，祖先div2是捕获，祖先div1是冒泡，祖先div0是捕获，
先处理捕获，捕获是祖先到自己，输出了：div0、div2，随后处理冒泡，冒泡是从自己到祖先，所以先输出自己，即div3，扩散（冒泡）给div1，div1输出。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-6&quot;&gt;&lt;strong&gt;六、如何去阻止冒泡和捕获的这种事件传播？&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;我们用stopPropagation（）方法阻止事件传播，我们把之间的监听事件全部改为冒泡模式，并且在每一个回调函数中阻止事件传播，修改之前代码如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;div0.addEventListener(&quot;click&quot;,div0Handler,false);
div1.addEventListener(&quot;click&quot;,div1Handler,false);
div2.addEventListener(&quot;click&quot;,div2Handler,false);
div3.addEventListener(&quot;click&quot;,div3Handler,false);

function div0Handler(e){
    e.stopPropagation();
    console.log(&quot;div0&quot;)
}
function div1Handler(e){
    e.stopPropagation();
    console.log(&quot;div1&quot;)
}
function div2Handler(e){
    e.stopPropagation();
    console.log(&quot;div2&quot;)
}
function div3Handler(e){
    e.stopPropagation();
    console.log(&quot;div3&quot;)
}  输出结果如下：
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;输出1：&lt;/strong&gt;点击div0（灰色的），控制台先后输出为：&lt;code class=&quot;highlighter-rouge&quot;&gt;div0&lt;/code&gt;。 &lt;br /&gt;
&lt;strong&gt;输出2：&lt;/strong&gt;点击div1（橙色的），控制台先后输出为：&lt;code class=&quot;highlighter-rouge&quot;&gt;div1&lt;/code&gt;。&lt;br /&gt;
&lt;strong&gt;输出3：&lt;/strong&gt;点击div2（蓝色的），控制台先后输出为：&lt;code class=&quot;highlighter-rouge&quot;&gt;div2&lt;/code&gt;。  &lt;br /&gt;
&lt;strong&gt;输出4：&lt;/strong&gt;点击div3（粉色的），控制台先后输出为：&lt;code class=&quot;highlighter-rouge&quot;&gt;div3&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;  &lt;strong&gt;解读上述输出结果：&lt;/strong&gt;&lt;br /&gt;
因为所有的都是冒泡模式，方向是从自己到祖先元素，输出自己后，紧接着阻止了事件传播，所以就达到了点击谁，就输出谁，没有任何传播。那么如果把上述的冒泡全部改为捕获呢？我们尝试一下，修改代码如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;div0.addEventListener(&quot;click&quot;,div0Handler,true);
div1.addEventListener(&quot;click&quot;,div1Handler,true);
div2.addEventListener(&quot;click&quot;,div2Handler,true);
div3.addEventListener(&quot;click&quot;,div3Handler,true);

function div0Handler(e){
    e.stopPropagation();
    console.log(&quot;div0&quot;)
}
function div1Handler(e){
    e.stopPropagation();
    console.log(&quot;div1&quot;)
}
function div2Handler(e){
    e.stopPropagation();
    console.log(&quot;div2&quot;)
}
function div3Handler(e){
    e.stopPropagation();
    console.log(&quot;div3&quot;)
}  输出结果如下：
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;输出1：&lt;/strong&gt;点击div0（灰色的），控制台先后输出为：&lt;code class=&quot;highlighter-rouge&quot;&gt;div0&lt;/code&gt;。 &lt;br /&gt;
&lt;strong&gt;输出2：&lt;/strong&gt;点击div1（橙色的），控制台先后输出为：&lt;code class=&quot;highlighter-rouge&quot;&gt;div0&lt;/code&gt;。&lt;br /&gt;
&lt;strong&gt;输出3：&lt;/strong&gt;点击div2（蓝色的），控制台先后输出为：&lt;code class=&quot;highlighter-rouge&quot;&gt;div0&lt;/code&gt;。  &lt;br /&gt;
&lt;strong&gt;输出4：&lt;/strong&gt;点击div3（粉色的），控制台先后输出为：&lt;code class=&quot;highlighter-rouge&quot;&gt;div0&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;  &lt;strong&gt;解读上述输出结果：&lt;/strong&gt;&lt;br /&gt;
因为所有的都是捕获模式，方向是从祖元素先到自己，无论点击谁，都先读取层级关系，都会找到祖先元素div0，然后都走div0的回调函数，但是div0的回调函数中，阻止了事件的传播。在执行了div0的回调函数后，一切都停止了，所以点击每个div都会输出div0。&lt;/p&gt;

&lt;h3 id=&quot;section-7&quot;&gt;&lt;strong&gt;七、总结&lt;/strong&gt;&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;1.冒泡模式：&lt;/strong&gt;先读取DOM层级关系，方向：从自己到祖先元素，浏览器默认采用这种方式处理。&lt;br /&gt;
&lt;strong&gt;2.捕获模式：&lt;/strong&gt;先读取DOM层级关系，方向：从祖先元素到自己。&lt;br /&gt;
&lt;strong&gt;3.冒泡与捕获同时存在：&lt;/strong&gt;先读取DOM层级关系，优先捕获事件处理，随后处理冒泡事件。&lt;br /&gt;
&lt;strong&gt;4.最后一个参数：&lt;/strong&gt;为了最好的兼容性，最后一个参数尽量不为空，最好写上true还是fasle&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 10 May 2018 00:00:00 +0800</pubDate>
        <link>/2018/05/JS%E4%B8%ADaddEventListener%E7%9A%84%E4%BA%8B%E4%BB%B6%E6%8D%95%E8%8E%B7-%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1/</link>
        <guid isPermaLink="true">/2018/05/JS%E4%B8%ADaddEventListener%E7%9A%84%E4%BA%8B%E4%BB%B6%E6%8D%95%E8%8E%B7-%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1/</guid>
        
        <category>JS技术</category>
        
        
      </item>
    
      <item>
        <title>web请求的服务器跳转和客户端跳转</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;概要：&lt;/h2&gt;
&lt;p&gt;  最近正在过一些web基础知识，就随手总结一下，本文简单梳理和总结一下关于web中两种跳转方式的原理和区别，以及以JSP标签和java代码为例的具体实现方式。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;两种方式的特点：&lt;/h2&gt;

&lt;h3 id=&quot;section-2&quot;&gt;&lt;strong&gt;1.服务器端跳转：&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1.1 基本流程&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;  客户端发送一个请求，请求一个服务器资源，如JSP和Servlet等，这个资源又将请求转到服务器的另一个资源，然后再给客户端发送一个响应，也就是说服务器端跳转是客户端发送1次请求，服务器端给出1次响应，由于是服务器内部的跳转，在客户端的表现是透明的，所以地址栏是不改变的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.2 特点&lt;/strong&gt;：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;特点1：&lt;/strong&gt;&lt;strong&gt;1次&lt;/strong&gt;请求，&lt;strong&gt;1次&lt;/strong&gt;回应。&lt;br /&gt;
&lt;strong&gt;特点2：&lt;/strong&gt;地址栏的路径不会被改变。&lt;br /&gt;
&lt;strong&gt;特点3：&lt;/strong&gt;对于&lt;strong&gt;JSP&lt;/strong&gt;内置的&lt;strong&gt;request对象&lt;/strong&gt;在跳转后，属性&lt;strong&gt;可用&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
 &lt;strong&gt;1.3 常见实现方式：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1.用jsp标签：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;jsp:forward page=&quot;目标地址&quot;/&amp;gt;	

&amp;lt;!-- 这里需要说明的是：&amp;lt;jsp:forward&amp;gt;,属于无条件跳转，但是它只能在容器内跳转，例如你不能指向百度。并且当页面中存在&amp;lt;jsp:forward&amp;gt;标签时，本页面代码不再执行，直接强制跳转，所以要确保你使用此标签前，已经释放了应该释放的资源，例如数据库连接等等。--&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2.在JSP中使用java：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;request.getRequestDispatcher(&quot;目标地址&quot;).forward(request, response); //我们常说的“转发”，同样只能在容器内跳转。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-3&quot;&gt;&lt;strong&gt;2.客户端跳转：&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;2.1 基本流程&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;  客户端同样是发送一个请求给服务器端资源，这个服务器资源会首先给客户端一个响应，客户端再根据这个响应当中所包含的地址，再次向服务器端发送一个请求，也就是说客户端跳转是2次请求，2次响应。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.2 特点&lt;/strong&gt;：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;特点1：&lt;/strong&gt;&lt;strong&gt;2次&lt;/strong&gt;请求，&lt;strong&gt;2次&lt;/strong&gt;响应。&lt;br /&gt;
&lt;strong&gt;特点2：&lt;/strong&gt;地址栏的路径会改变。&lt;br /&gt;
&lt;strong&gt;特点3：&lt;/strong&gt;对于&lt;strong&gt;JSP&lt;/strong&gt;内置的&lt;strong&gt;request对象&lt;/strong&gt;在跳转后，属性&lt;strong&gt;不可用&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;2.3 常见实现方式：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1.靠一些html标签（当然也可以是其他的html标签，以&lt;strong&gt;&amp;lt;a&amp;gt;&lt;/strong&gt;标签举例）：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;a href =&quot;目标地址&quot;&amp;gt;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2.在JSP中使用java：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;response.sendRedirect(&quot;目标地址&quot;); //我们常说的“重定向”

//这里需要说明的是：sendREdirect可以任意跳转，例如直接指向百度也是可以的，但是要用有http://协议头。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-4&quot;&gt;图示理解&lt;/h2&gt;
&lt;p&gt;  为了能更好的理解并记住这两种方式，我们通过下面两个例子进行理解，本人的经验和技术都有限，所以不知道例子是否恰当，但是希望可以帮助大家理解：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;我们先看服务器跳转：&lt;/strong&gt;
&lt;img src=&quot;http://oi5hiw2r7.bkt.clouddn.com//blog/img/a.jpg?imageMogr2/thumbnail/700x500&amp;gt;/blur/1x0/quality/100&quot; alt=&quot;服务器跳转图示&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;在服务器跳转中（如上图）：&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;1.客户去银行窗口咨询一项理财服务（相当于客户端的1次请求）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;2.银行窗口的员工发现自己不清楚这个理财产品，电话询问了主管，主管告诉了她相关信息。（相当于服务器内部进行了跳转）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;3.窗口员工把理财产品信息告诉了客户（客户收到了服务器的1次响应）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;注意在整个过程中：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;客户相当于客户端，主管和办事窗口相当于服务器。这个过程中客户端发了&lt;strong&gt;1&lt;/strong&gt;次请求，得到&lt;strong&gt;1&lt;/strong&gt;次回应。办事窗口与主管之间是可以互通消息的，相当于客户端与服务器之间在这种跳转中request对象等是可以用的；客户在这个过程中并不知道办事窗口员工给主管打了电话，只知道窗口告诉了他最终结果，相当于客户端浏览器的地址没有任何变化，但是返回的内容是经过服务器内部跳转之后的。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;再看客户端跳转：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oi5hiw2r7.bkt.clouddn.com//blog/img/b.jpg?imageMogr2/thumbnail/700x500&amp;gt;/blur/1x0/quality/100&quot; alt=&quot;服务器跳转图示&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;在客户端跳转中（如上图）：&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;1.客户去银行窗口咨询一项理财服务（相当于客户端的一次请求）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;2.银行窗口的员工发现自己不清楚这个理财产品，并告知客户去隔壁的主管窗口办理。（相当于客户端得到了一次服务器的响应，内容为：“去找主管”。）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;3.客户去隔壁的窗口找主管咨询，因为主管不知道客户要咨询什么，所以客户再次说明自己要咨询的理财产品。（相当于客户端再次发起请求，但是请求中的request属性都不再可用），客户此时换了座位，坐在了主管窗口。（相当于浏览器的地址发生改变，因为这是客户端自己发出的请求。）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;4.主管告诉了客户相关信息（相当于客户端再次得到一次响应）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;注意在整个过程中：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;  客户同样相当于客户端，主管和办事窗口相当于服务器。这个过程中客户端发了&lt;strong&gt;2&lt;/strong&gt;次请求，得到&lt;strong&gt;2&lt;/strong&gt;次回应。并且办事窗口与主管之间是&lt;strong&gt;不可以&lt;/strong&gt;互通消息的，客户和办事窗口说了什么，主管完全不知道，客户只能完全再复述一遍才可以继续沟通，相当于客户端与服务器之间在这种跳转中request对象等是&lt;strong&gt;不可用&lt;/strong&gt;的；因为客户自己去的主管窗口，所以客户的位置发生了改变，相当于浏览器的地址发生了改变。&lt;/p&gt;

&lt;p&gt;希望能对看到总结的小伙伴有一些帮助。&lt;/p&gt;

</description>
        <pubDate>Sun, 25 Sep 2016 00:00:00 +0800</pubDate>
        <link>/2016/09/web%E8%AF%B7%E6%B1%82%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B7%B3%E8%BD%AC%E5%92%8C%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B7%B3%E8%BD%AC/</link>
        <guid isPermaLink="true">/2016/09/web%E8%AF%B7%E6%B1%82%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B7%B3%E8%BD%AC%E5%92%8C%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B7%B3%E8%BD%AC/</guid>
        
        <category>JSP技术</category>
        
        
      </item>
    
  </channel>
</rss>
